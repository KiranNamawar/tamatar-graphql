// Analytics, tracking, and wellness schema

model Goal {
    id           String       @id @default(cuid())
    userId       String
    title        String
    description  String?
    category     GoalCategory
    targetValue  Float? // For measurable goals
    currentValue Float?       @default(0)
    unit         String? // e.g., "hours", "projects", "commits"
    deadline     DateTime?
    status       GoalStatus   @default(ACTIVE)
    isPublic     Boolean      @default(false)
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([status])
    @@index([deadline])
    @@map("goals")
}

model FocusSession {
    id           String         @id @default(cuid())
    userId       String
    projectId    String?
    title        String
    duration     Int // Duration in minutes
    technique    FocusTechnique @default(POMODORO)
    completed    Boolean        @default(false)
    productivity Int? // 1-10 self-assessment
    notes        String?
    startedAt    DateTime       @default(now())
    completedAt  DateTime?

    // Relations
    user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    project Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)

    @@index([userId])
    @@index([projectId])
    @@index([startedAt])
    @@map("focus_sessions")
}

model Mood {
    id         String   @id @default(cuid())
    userId     String
    energy     Int // 1-10 scale
    motivation Int // 1-10 scale
    focus      Int // 1-10 scale
    stress     Int // 1-10 scale
    mood       MoodType
    notes      String?
    date       DateTime @default(now()) @db.Date
    createdAt  DateTime @default(now())

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, date])
    @@index([userId])
    @@index([date])
    @@map("moods")
}

model CodeMetric {
    id                   String   @id @default(cuid())
    projectId            String
    linesOfCode          Int
    complexity           Float
    testCoverage         Float?
    maintainabilityIndex Float?
    technicalDebt        Float?
    performance          Float?
    security             Float?
    date                 DateTime @default(now()) @db.Date
    createdAt            DateTime @default(now())

    // Relations
    project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

    @@unique([projectId, date])
    @@index([projectId])
    @@index([date])
    @@map("code_metrics")
}

model SkillProgress {
    id            String     @id @default(cuid())
    userId        String
    skill         String // e.g., "React", "TypeScript", "Database Design"
    level         SkillLevel
    confidence    Int // 1-10 self-assessment
    lastPracticed DateTime?
    totalHours    Float      @default(0)
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, skill])
    @@index([userId])
    @@index([skill])
    @@map("skill_progress")
}

model Quiz {
    id          String     @id @default(cuid())
    userId      String
    skill       String
    question    String
    answer      String
    userAnswer  String?
    correct     Boolean?
    difficulty  Difficulty
    nextReview  DateTime // For spaced repetition
    reviewCount Int        @default(0)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt

    // Relations
    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([nextReview])
    @@index([skill])
    @@map("quizzes")
}

// Enums
enum GoalCategory {
    LEARNING
    PROJECT
    SKILL
    CAREER
    HEALTH
    PRODUCTIVITY
}

enum GoalStatus {
    ACTIVE
    COMPLETED
    PAUSED
    CANCELLED
}

enum FocusTechnique {
    POMODORO
    TIMEBOXING
    FLOW_TIME
    DEEP_WORK
}

enum MoodType {
    EXCELLENT
    GOOD
    NEUTRAL
    LOW
    STRESSED
}

enum SkillLevel {
    BEGINNER
    NOVICE
    INTERMEDIATE
    ADVANCED
    EXPERT
}
