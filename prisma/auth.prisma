// Authentication and user management schema

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  username      String   @unique // Auto-generated from email, can be updated later
  password      String
  name          String?
  avatar        String?
  bio           String?
  emailVerified Boolean  @default(false)
  role          UserRole @default(USER)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Authentication sessions
  sessions Session[]

  // Email verification
  emailVerificationTokens EmailVerificationToken[]

  // Password reset
  passwordResetTokens PasswordResetToken[]
  // Relations to other models
  projects            Project[]
  dailyLogs           DailyLog[]
  resources           Resource[]
  resourceRatings     ResourceRating[]
  learningPaths       LearningPath[]

  // Social relations
  followers        Follow[]            @relation("UserFollowers")
  following        Follow[]            @relation("UserFollowing")
  userAchievements UserAchievement[]
  notifications    Notification[]
  menteeRequests   MentorshipRequest[] @relation("MenteeRequests")
  mentorRequests   MentorshipRequest[] @relation("MentorRequests")

  // Analytics and wellness
  goals         Goal[]
  focusSessions FocusSession[]
  moods         Mood[]
  skillProgress SkillProgress[]
  quizzes       Quiz[]

  @@map("users")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  deviceName   String? // e.g., "iPhone 13", "Chrome on Windows"
  deviceType   String? // e.g., "mobile", "desktop", "tablet"
  ipAddress    String?
  userAgent    String?
  lastActiveAt DateTime @default(now())
  expiresAt    DateTime
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Indexes for performance
  @@index([userId])
  @@index([lastActiveAt])
  @@index([expiresAt])
  @@map("sessions")
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@map("email_verification_tokens")
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
  @@index([expiresAt])
  @@map("password_reset_tokens")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
}
