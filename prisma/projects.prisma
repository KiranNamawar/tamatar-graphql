// Project management and tracking schema

model Project {
  id            String         @id @default(cuid())
  name          String
  description   String?
  status        ProjectStatus  @default(ACTIVE)
  userId        String
  githubUrl     String?
  demoUrl       String?
  tags          String[] // Array of technology tags
  isPublic      Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  dailyLogs     DailyLog[]
  commits       Commit[]
  focusSessions FocusSession[]
  codeMetrics   CodeMetric[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("projects")
}

model DailyLog {
  id         String   @id @default(cuid())
  userId     String
  projectId  String?
  title      String
  content    String // Markdown content
  learned    String? // What was learned
  challenges String? // Challenges faced
  goals      String? // Goals for next session
  mood       LogMood? // Developer's mood for the day
  tags       String[] // Array of tags
  isPublic   Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project?           @relation(fields: [projectId], references: [id], onDelete: SetNull)
  resources DailyLogResource[]
  commits   DailyLogCommit[]

  @@index([userId])
  @@index([projectId])
  @@index([createdAt])
  @@map("daily_logs")
}

model Commit {
  id         String   @id @default(cuid())
  sha        String   @unique
  message    String
  url        String
  projectId  String
  authorDate DateTime
  createdAt  DateTime @default(now())

  // Relations
  project         Project          @relation(fields: [projectId], references: [id], onDelete: Cascade)
  dailyLogCommits DailyLogCommit[]

  @@index([projectId])
  @@index([authorDate])
  @@map("commits")
}

model DailyLogCommit {
  id         String @id @default(cuid())
  dailyLogId String
  commitId   String

  // Relations
  dailyLog DailyLog @relation(fields: [dailyLogId], references: [id], onDelete: Cascade)
  commit   Commit   @relation(fields: [commitId], references: [id], onDelete: Cascade)

  @@unique([dailyLogId, commitId])
  @@map("daily_log_commits")
}

// Enums
enum ProjectStatus {
  ACTIVE
  COMPLETED
  ON_HOLD
  ARCHIVED
}

enum LogMood {
  EXCELLENT
  GOOD
  NEUTRAL
  CHALLENGING
  FRUSTRATED
}
